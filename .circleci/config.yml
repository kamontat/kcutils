version: 2.1

orbs:
  node: circleci/node@2.1.0
  sonarcloud: sonarsource/sonarcloud@1.0.1

parameters:
  node-version:
    type: string
    default: "12.16"

# Require environment data
# you can see all require environment variable at .env-default file

commands:
  gpg-setup:
    description: GPG setup
    steps:
      - run:
          name: "Import private key in GPG"
          command: echo "$GPG_PRIVATE_KEY_BASE64" | base64 --decode | gpg --batch --allow-secret-key-import --import
  gpg-cleanup:
    description: GPG cleanup
    steps:
      - run:
          name: "Deleting private key in GPG"
          command: gpg --batch --yes --delete-secret-key "$GPG_IDENTIFY_KEY"
      - run:
          name: "Deleting public key in GPG"
          command: gpg --batch --yes --delete-key "$GPG_IDENTIFY_KEY"
      - run:
          name: "Listing all secret keys in GPG"
          command: gpg --keyid-format LONG --list-secret-key
  git-setup:
    description: Git setup
    steps:
      - run:
          name: "Add git user email"
          command: git config --global user.email "$COMMIT_EMAIL"
      - run:
          name: "Add git username"
          command: git config --global user.name "$COMMIT_NAME"
      - run:
          name: "Add git user signing key"
          command: git config --global user.signingKey "$GPG_SIGNING_KEY"
  git-cleanup:
    description: Git cleanup
    steps:
      - run:
          name: "Remove git user email"
          command: git config --global user.email ""
      - run:
          name: "Remove git username"
          command: git config --global user.name ""
      - run:
          name: "Remove git user signing key"
          command: git config --global user.signingKey ""
  install-aptget:
    description: Install aptget package
    parameters:
      package-name:
        description: aptget package name
        type: string
    steps:
      - run:
          name: Install << parameters.package-name >>
          command: |
            sudo add-apt-repository universe
            sudo apt-get update
            sudo apt-get install -y << parameters.package-name >>
  install-dependencies:
    description: Install and links projects
    parameters:
      only-lerna:
        default: false
        type: boolean
        description: only install lerna
    steps:
      - node/install-packages:
          cache-version: "v1-lerna"
          cache-key: "yarn.lock"
          pkg-manager: yarn
          include-branch-in-cache-key: false
      - unless:
          condition: << parameters.only-lerna >>
          steps:
            - run:
                name: Install and links lerna project together
                command: yarn bootstrap
  compile-typescript:
    description: compile code
    parameters:
      all:
        description: compile all packages
        type: boolean
        default: true
    steps:
      - when:
          condition: << parameters.all >>
          steps:
            - run:
                name: Compile and build all packages application
                command: yarn build:ci
      - unless:
          condition: << parameters.all >>
          steps:
            - run:
                name: Compile and build only internal application
                command: yarn build:init
  build-start:
    description: Build and Start package
    parameters:
      package-name:
        description: script package name
        type: string
      build:
        description: with build
        type: boolean
        default: true
    steps:
      - when:
          condition: << parameters.build >>
          steps:
            - run:
                name: Building << parameters.package-name >>
                command: yarn build:<< parameters.package-name >>
      - run:
          name: Starting << parameters.package-name >>
          command: yarn start:<< parameters.package-name >>
  publish:
    description: Publish new version
    parameters:
      option:
        description: extra option for version command
        type: string
    steps:
      - run:
          name: check git status
          command: git diff --color-words | cat
      - run:
          name: clean git repository
          command: git checkout .
      - run:
          name: "List all package will package"
          command: yarn updated:ci || true
      - run:
          name: "Update version on package"
          command: yarn version:ci << parameters.option >> || true
      - run:
          name: "Release new package version"
          command: yarn release:ci << parameters.option >> || true

jobs:
  main:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      ENV: "ci"
      JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
    steps:
      - checkout
      - install-dependencies
      - compile-typescript
      - run:
          name: "Linting all source code"
          command: yarn lint:ci
      - run:
          name: "Testing all unittest"
          command: yarn test:ci
      - sonarcloud/scan:
          cache_version: 1
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./coverage
          destination: reports/coverage
      - store_artifacts:
          path: ./reports/jest/
          destination: reports/jest
      - store_artifacts:
          path: ./reports/junit/
          destination: reports/junit

  build-graph:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-aptget:
          package-name: graphviz
      - install-dependencies
      - compile-typescript:
          all: false
      - build-start:
          package-name: graph
      - store_artifacts:
          path: ./packages/_graph/graph.pdf
          destination: result/graph.pdf

  release-beta:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - gpg-setup
      - git-setup
      - install-dependencies
      - compile-typescript:
          all: true
      - publish:
          option: "type=beta"
      - git-cleanup
      - gpg-cleanup

  release-rc:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - gpg-setup
      - git-setup
      - install-dependencies
      - compile-typescript:
          all: true
      - publish:
          option: "type=rc"
      - git-cleanup
      - gpg-cleanup

  release:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - gpg-setup
      - git-setup
      - install-dependencies
      - compile-typescript:
          all: true
      - publish:
          option: "type=live"
      - git-cleanup
      - gpg-cleanup

workflows:
  version: 2
  default:
    jobs:
      - main:
          context: monots-release
      - build-graph:
          context: monots-release
          filters:
            branches:
              only:
                - master
          requires:
            - main
      - release:
          context: monots-release
          filters:
            branches:
              only:
                - master
          requires:
            - build-graph
      - release-rc:
          context: monots-release
          filters:
            branches:
              only:
                - develop
          requires:
            - main
      - release-beta:
          context: monots-release
          filters:
            branches:
              only:
                - /feature\/.*/
          requires:
            - main
